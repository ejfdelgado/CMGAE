var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var hayValor = function hayValor(valor) {
	return valor != undefined && valor != null && (!(typeof valor == 'string') || valor.trim().length > 0);
};

var esFuncion = function esFuncion(algo) {
	return typeof algo == 'function';
};

var esNumero = function esNumero(dato) {
	return typeof dato == 'number' || /^\d+$/.test(dato);
};

var esBoolean = function esBoolean(variable) {
	return typeof variable === "boolean";
};

var esObjeto = function esObjeto(value) {
	return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object' && value !== null;
};

var esLista = function esLista(value) {
	return hayValor(value) && value instanceof Array;
};

var esMultilenguaje = function esMultilenguaje(entrada) {
	return (/^(\S)+(\.\S+)+$/gim.test(entrada)
	);
};

var leerObj = function leerObj(obj, nombres, predef, evitarInvocar) {
	if (!hayValor(nombres) || !esObjeto(obj)) {
		return predef;
	}
	var partes = nombres.split('.');
	var objetoActual = obj;
	for (var i = 0; i < partes.length; i++) {
		var llave = partes[i];
		if (esNumero(llave) && esLista(objetoActual)) {
			llave = parseInt(llave);
		}
		objetoActual = objetoActual[llave];
		if (i != partes.length - 1 && !esObjeto(objetoActual)) {
			return predef;
		}
	}
	if (!hayValor(objetoActual)) {
		return predef;
	}
	if (evitarInvocar !== true && esFuncion(objetoActual)) {
		return objetoActual();
	}
	return objetoActual;
};

var asignarObj = function asignarObj(raiz, nombres, valor) {
	var partes = nombres.split('.');
	var objetoActual = raiz;
	for (var i = 0; i < partes.length; i++) {
		var llave = partes[i];
		if (esNumero(llave)) {
			llave = parseInt(llave);
		}
		if (esObjeto(objetoActual)) {
			if (i == partes.length - 1) {
				if (esLista(objetoActual[llave]) && esLista(valor) && objetoActual[llave] !== valor) {
					objetoActual[llave].splice(0, objetoActual[llave].length);
					$.each(valor, function (i, eee) {
						objetoActual[llave].push(eee);
					});
				} else {
					objetoActual[llave] = valor;
				}
			} else {
				if (Object.keys(objetoActual).indexOf('' + llave) < 0 || objetoActual[llave] == null) {
					if (esNumero(partes[i + 1])) {
						objetoActual[llave] = [];
					} else {
						objetoActual[llave] = {};
					}
				}
				objetoActual = objetoActual[llave];
			}
		}
	}
};

var darRutasObjeto = function darRutasObjeto(objOr, filtroObjetoAgregar) {
	var ans = [];
	var funcionRecursiva = function funcionRecursiva(obj, rutaActual) {
		if (esObjeto(obj)) {
			$.each(obj, function (llave, valor) {
				var llaveSiguiente = null;
				if (rutaActual === null) {
					llaveSiguiente = llave;
				} else {
					llaveSiguiente = rutaActual + '.' + llave;
				}
				if (esFuncion(filtroObjetoAgregar) && filtroObjetoAgregar(valor)) {
					ans.push(llaveSiguiente);
				}
				funcionRecursiva(valor, llaveSiguiente);
			});
		} else {
			if (rutaActual !== null) {
				if (esFuncion(filtroObjetoAgregar)) {
					if (filtroObjetoAgregar(obj)) {
						ans.push(rutaActual);
					}
				} else {
					ans.push(rutaActual);
				}
			}
		}
	};

	funcionRecursiva(objOr, null);
	return ans;
};

var predefinir = function predefinir(objeto, ejemplo) {
	var llaves = darRutasObjeto(ejemplo);
	for (var i = 0; i < llaves.length; i++) {
		var llave = llaves[i];
		if (!hayValor(leerObj(objeto, llave, null, true))) {
			var nuevo = leerObj(ejemplo, llave, null, true);
			asignarObj(objeto, llave, nuevo);
		}
	}
	return objeto;
};

/*
Función que facilita la configuración de listas de datos con Midgard
La configuración de listas es algo como:
{
	'Caracteristica': {
		ejemplo: '#CaracteristicaEjemplo',
		campos: [
		         {nombre:'imagen', tipo:'Text'},
		         {nombre:'titulo', tipo:'TextSimple'},
		         {nombre:'contenido', tipo:'nuevo'},
		],
		listas: [{nombre:'lista1'}],
	}
}
 */
var configurarListasEditor = function configurarListasEditor(vie, configuracionListas) {
	vie.use(new vie.RdfaService());

	for (var tipoNombre in configuracionListas) {
		var tipoNombreRel = tipoNombre + 'Rel';
		var unTipo = configuracionListas[tipoNombre];
		var confCampos = [];
		for (var i = 0; i < unTipo.campos.length; i++) {
			var unCampo = unTipo.campos[i];
			confCampos.push({ 'id': unCampo.nombre, 'range': unCampo.tipo, 'min': 0, 'max': 1 });
		}
		vie.types.add(tipoNombre, confCampos);
		for (var j = 0; j < unTipo.listas.length; j++) {
			var elem = unTipo.listas[j];
			vie.types.add(elem.nombre, [{ id: tipoNombreRel, range: tipoNombre, min: 0, max: -1 }]);
		}
		vie.service('rdfa').setTemplate(tipoNombre, tipoNombreRel, jQuery(unTipo.ejemplo).html());
	}
};

var tieneAtributo = function tieneAtributo(elem, name) {
	var attr = elem.attr(name);
	return (typeof attr === 'undefined' ? 'undefined' : _typeof(attr)) !== (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined)) && attr !== false;
};

var activarConteoRegresivo = function activarConteoRegresivo() {
	//Countdown
	//<script src="/assets/js/comun/jquery.countdown.min.js"></script>
	//<div dateProperty="regresivo" data-value="{% buscar leng dicci tipo nodo 'regresivo' '1480809600' %}"><h1 class="mycountdown" data-format="yyyy/MM/dd" data-count-format="%D d&iacute;as %H:%M:%S"></h1></div>
	$('.mycountdown').each(function (i, obj) {
		var self = $(obj);
		var inicio = self.text();
		var formato = self.attr('data-count-format');
		self.countdown(inicio, function (event) {
			$(this).text(event.strftime(formato));
		});
	});
};

//TODO homologar con waitOn y waitOff
if (!hayValor(moduloActividad)) {
	var moduloActividad = function () {
		var pendientes = 0;
		var actividadOn = function actividadOn(mensaje) {
			if (!hayValor(mensaje)) {
				mensaje = '';
			}
			if (pendientes == 0) {
				var nuevo = $('<div id="loading"><p></p></div>');
				nuevo.find('p').html(mensaje);
				$('body').append(nuevo);
			}
			pendientes++;
		};

		var actividadOff = function actividadOff() {
			pendientes--;
			if (pendientes <= 0) {
				pendientes = 0;
				$('#loading').remove();
			}
		};

		return {
			on: actividadOn,
			off: actividadOff
		};
	}();
}
if (!hayValor(moduloHttp)) {
	var moduloHttp = function () {

		var get = function get(url) {
			var diferido = $.Deferred();
			moduloActividad.on();
			$.ajax({
				'url': url,
				'type': 'GET',
				'cache': false
			}).done(function (datos) {
				diferido.resolve(datos);
			}).fail(function () {
				diferido.reject();
			}).always(function () {
				moduloActividad.off();
			});
			return diferido.promise();
		};

		var darToken = function darToken() {
			return $('[name="csrfmiddlewaretoken"]').val();
		};

		var darHeader = function darHeader() {
			return {
				'X-CSRFToken': darToken()
			};
		};

		return {
			'get': get,
			'darToken': darToken,
			'darHeader': darHeader
		};
	}();
}

if (!hayValor(moduloLocal)) {
	var moduloLocal = function () {
		var props = {
			'lengua': LENGUAJE,
			'lenguapred': LENGUAJE_PRED
		};

		var datos = null;

		var inicializar = function inicializar() {
			var diferido = $.Deferred();
			var promesa = moduloHttp.get('/assets/cmgae/local/' + props.lengua + '.json');
			$.when(promesa).then(function (nuevos) {
				datos = JSON.parse(nuevos);
				diferido.resolve();
			});
			//Se formatean las fechas
			epochAFechaElem($('body'));
			activarBotonesLenguaje();
			return diferido.promise();
		};

		var traducir = function traducir(llave) {
			if (!esObjeto(datos)) {
				return llave;
			}
			return leerObj(datos, llave, llave);
		};

		var procesarElemento = function procesarElemento(elem) {
			$.each(elem.find('.traducir'), function (i, hijoB) {
				var hijo = $(hijoB);
				var llave = hijo.text();
				if (esMultilenguaje(llave)) {
					var traducido = traducir(llave);
					if (traducido != llave) {
						hijo.html(traducido);
					}
				}
			});
		};

		var epochAFecha = function epochAFecha(objeto, formato1) {
			var fechaTexto = objeto.attr("data-value");
			if (fechaTexto) {
				var fecha = new Date(0);
				try {
					fecha.setUTCSeconds(parseInt(fechaTexto));
				} catch (e) {}
				objeto.find("[data-format]").each(function (index, element) {
					var actual = $(element);
					var formato = actual.attr("data-format");
					var formateado = $.format.date(fecha.getTime(), formato);
					actual.text(formateado);
				});
				if (formato1 !== undefined) return $.format.date(fecha.getTime(), formato1);
			}
			return "";
		};

		var epochAFechaElem = function epochAFechaElem(elemento) {
			elemento.find("[dateProperty]").each(function (index, element) {
				var actual = $(element);
				epochAFecha(actual);
			});
		};

		var activarBotonesLenguaje = function activarBotonesLenguaje() {
			$('[data-lenguaje]').each(function (i, elem) {
				var self = $(elem);
				var lenguaje = self.attr('data-lenguaje');
				self.off('click', '**');
				self.on('click', function () {
					var matchCampo = /(http)(s?)(:)(\/\/)(.*?)(\/)((leng-)(.*?)(\/))?(.*)/g.exec(window.location);
					if (matchCampo) {
						var nuevo = '';
						var primeravez = true;
						var actual = matchCampo[9];
						var es_predeterminado = lenguaje === props.lenguapred;
						for (var i = 1; i < matchCampo.length; i++) {
							var temp = matchCampo[i];
							if (i <= 6 || i >= 11) {
								if (temp !== undefined) {
									nuevo += temp;
								}
							} else {
								if (es_predeterminado) {
									if (actual === undefined) {
										return;
									}
								} else {
									if (actual === lenguaje) {
										return;
									}
								}
								if (!es_predeterminado && primeravez) {
									nuevo += 'leng-' + lenguaje + '/';
									primeravez = false;
								}
							}
						}
						window.location = nuevo;
					}
				});
			});
		};

		return {
			'inicializar': inicializar,
			'traducir': traducir,
			'procesarElemento': procesarElemento,
			'epochAFechaElem': epochAFechaElem
		};
	}();
}
//Leer https://ace.c9.io/build/kitchen-sink.html
if (!hayValor(moduloEditorTexto)) {
	var moduloEditorTexto = function moduloEditorTexto(ele) {
		var idLocal = 'pluginEditor';
		var destruirEditor = function destruirEditor() {
			ele.empty();
			var nuevo = $('<div/>', { id: idLocal });
			ele.append(nuevo);
		};

		var abrirEditor = function abrirEditor(nombre, contenido, id) {
			var mapaTipos = [{ 'patron': /.*\.js/ig, 'editor': 'ace/mode/javascript' }, { 'patron': /.*\.html/ig, 'editor': 'ace/mode/html' }, { 'patron': /.*\.json/ig, 'editor': 'ace/mode/json' }, { 'patron': /.*\.css/ig, 'editor': 'ace/mode/css' }, { 'patron': /.*\.xml/ig, 'editor': 'ace/mode/xml' }];
			destruirEditor();
			var editor = ace.edit(idLocal);
			editor.setValue(contenido);
			editor.setTheme("ace/theme/monokai");
			editor.commands.addCommand({
				name: 'comandoGuardar',
				bindKey: { win: 'Ctrl-S', mac: 'Command-S' },
				exec: function exec(editor) {
					guardarArchivo(id);
				},
				readOnly: true // false if this command should not apply in readOnly mode
			});
			for (var i = 0; i < mapaTipos.length; i++) {
				var unTipo = mapaTipos[i];
				if (unTipo.patron.test(nombre)) {
					editor.getSession().setMode(unTipo.editor);
				}
			}
		};

		var guardarArchivo = function guardarArchivo(id) {
			var editor = ace.edit(idLocal);
			var promesa = moduloArchivos.escribirTextoPlano(id, editor.getValue());
			$.when(promesa).then(function () {
				alert('Archivo guardado!');
			}, function () {
				alert('Error subiendo el archivo');
			});
		};

		return {
			abrirEditor: abrirEditor,
			destruirEditor: destruirEditor
		};
	};
}

if (!hayValor(moduloArchivos)) {
	var moduloArchivos = function () {
		var MAX_FILE_SIZE = 500 * 1024; //en KB

		var completarPredeterminados = function completarPredeterminados(atributos) {
			var mapa = {
				'maximoTamanio': MAX_FILE_SIZE,
				'tipos': 'image/*',
				'auto': 'true',
				'dataFolder': '/imagenesbasico'
			};
			for (var llave in mapa) {
				if (!hayValor(atributos[llave])) {
					atributos[llave] = mapa[llave];
				}
			}
			return atributos;
		};

		var subirArchivo = function subirArchivo(atributos) {
			var diferido = $.Deferred();
			atributos = completarPredeterminados(atributos);
			var temp = $('<input type="file" class="invisible" accept="' + atributos.tipos + '">');
			temp.on("change", function (e) {
				var file = e.target.files[0];
				if (file.size > atributos.maximoTamanio) {
					alert('Archivo muy grande! debe ser menor a ' + atributos.maximoTamanio / 1024 + ' KB');
					diferido.reject();
					return;
				}
				var reader = new FileReader();
				reader.readAsDataURL(file);
				var form = new FormData();
				form.append('file-0', file);
				form.append('folder', atributos.dataFolder);
				if (hayValor(atributos.id)) {
					form.append('name', atributos.id);
				}
				if (atributos.auto == 'false') {
					form.append('auto', 'false');
				}
				moduloActividad.on();
				$.ajax({
					url: '/storage/',
					type: 'POST',
					data: form,
					headers: moduloHttp.darHeader(),
					cache: false,
					contentType: false,
					processData: false
				}).done(function (data) {
					if (data.error != 0) {
						diferido.reject();
					} else {
						diferido.resolve(data);
					}
				}).fail(function () {
					diferido.reject();
				}).always(function () {
					moduloActividad.off();
				});
			});
			temp.click();
			return diferido.promise();
		};

		var escribirTextoPlano = function escribirTextoPlano(id, contenido) {
			var diferido = $.Deferred();
			var blobAttrs = { type: "text/plain" };
			var file = new File([contenido], id, blobAttrs);
			var form = new FormData();
			form.append('file-0', file);
			form.append('auto', 'false');
			form.append('name', id);
			moduloActividad.on();
			$.ajax({
				url: '/storage/',
				type: 'POST',
				data: form,
				headers: moduloHttp.darHeader(),
				cache: false,
				contentType: false,
				processData: false
			}).done(function (data) {
				if (data.error != 0) {
					diferido.reject();
				} else {
					diferido.resolve();
				}
			}).fail(function () {
				diferido.reject();
			}).always(function () {
				moduloActividad.off();
			});
			return diferido.promise();
		};

		var leerTextoPlano = function leerTextoPlano(id) {
			var diferido = $.Deferred();
			moduloActividad.on();
			$.ajax({
				url: generarUrlDadoId(id),
				type: 'GET',
				cache: false,
				contentType: false,
				processData: false
			}).done(function (data) {
				diferido.resolve(data);
			}).fail(function () {
				diferido.reject();
			}).always(function () {
				moduloActividad.off();
			});
			return diferido.promise();
		};

		var generarUrlDadoId = function generarUrlDadoId(unId) {
			var valor;
			if (moduloApp.esProduccion()) {
				valor = 'http://storage.googleapis.com' + unId + '?' + new Date().getTime();
			} else {
				var PREFIJO = '/app_default_bucket';
				if (unId.startsWith(PREFIJO)) {
					unId = unId.substring(PREFIJO.length);
				}
				valor = '/storage/read?name=' + encodeURIComponent(unId);
			}
			return valor;
		};

		var darIdDadoUrl = function darIdDadoUrl(direccion) {
			if (!hayValor(direccion)) {
				return null;
			}
			if (moduloApp.esProduccion()) {
				var PATRON_GOOGLE_STORAGE = /^(https?:\/\/storage\.googleapis\.com)([^\?]*)(\?.*)?$/ig;
				var partes = PATRON_GOOGLE_STORAGE.exec(direccion);
				if (partes != null && partes.length >= 3) {
					return partes[2];
				}
			} else {
				var PATRON_LOCAL_STORAGE = /(\/storage\/read\?name=)(.*)/ig;
				var _partes = PATRON_LOCAL_STORAGE.exec(direccion);
				if (_partes != null && _partes.length >= 3) {
					return _partes[2];
				}
			}
			return null;
		};

		return {
			'leerTextoPlano': leerTextoPlano,
			'escribirTextoPlano': escribirTextoPlano,
			'subirArchivo': subirArchivo,
			'generarUrlDadoId': generarUrlDadoId,
			'darIdDadoUrl': darIdDadoUrl,
			'completarPredeterminados': completarPredeterminados
		};
	}();
}

//Leer https://www.jstree.com/plugins/
if (!hayValor(moduloArbolArchivos)) {
	var moduloArbolArchivos = function moduloArbolArchivos(elem, elemEditor) {

		var instanciaEditorTexto = moduloEditorTexto(elemEditor);

		elem.on("changed.jstree", function (event, data) {
			if (data.selected.length) {
				var ref = data.instance.get_node(data.selected[0]);
			}
		});

		elem.on("rename_node.jstree", function (event, data) {
			var anterior = data.old;
			var nuevo = data.text;
			var elNodo = data.node;
			//TODO En el servidor actualizar la ruta y luego actualizar el id
			if (elNodo.original.type == 'folder') {
				data.instance.set_id(elNodo, data.node.parent + nuevo + '/');
			} else {
				data.instance.set_id(elNodo, data.node.parent + nuevo);
			}
		});

		elem.on("load_node.jstree", function (event, data) {
			var refArbol = data.instance;
			//Se itera sobre los hijos buscando los nodos que son type file
			for (var i = 0; i < data.node.children.length; i++) {
				var elId = data.node.children[i];
				var unNodo = refArbol.get_node(elId);
				ajustarAspectoNodo(unNodo);
			}
		});

		elem.on("create_node.jstree", function (event, data) {
			ajustarAspectoNodo(data.node);
		});

		var ajustarAspectoNodo = function ajustarAspectoNodo(unNodo) {
			if (unNodo.original.type == 'file') {
				elem.jstree(true).set_icon(unNodo.id, "/assets/js/jstree/themes/default/file.png");
			}
		};

		var menuALaMedida = function menuALaMedida($node) {
			var abrir = {
				"separator_before": false,
				"separator_after": false,
				"label": "Abrir",
				"action": function action(data) {
					instanciaEditorTexto.destruirEditor();
					var inst = $.jstree.reference(data.reference);
					var ref = inst.get_node(data.reference);
					var promesaCargue = moduloArchivos.leerTextoPlano(ref.id);
					$.when(promesaCargue).then(function (contenido) {
						//TODO detectar que es error de que no existe, diferente a otro error
						if (typeof contenido != 'string') {
							contenido = '';
						}
						instanciaEditorTexto.abrirEditor(ref.text, contenido, ref.id);
					});
				}
			};
			var crearCarpeta = {
				"separator_before": false,
				"separator_after": false,
				"label": "Crear carpeta",
				"action": function action(data) {
					var nuevoNodo = { 'text': 'nuevo', 'type': 'folder' };
					var inst = $.jstree.reference(data.reference),
					    obj = inst.get_node(data.reference);
					inst.create_node(obj, nuevoNodo, "last", function (new_node) {
						//new_node.data = {file: true};
						setTimeout(function () {
							inst.edit(new_node);
						}, 0);
					});
				}
			};

			var crearArchivo = {
				"separator_before": false,
				"separator_after": false,
				"label": "Crear archivo",
				"action": function action(data) {
					var nuevoNodo = { 'text': 'nuevo', 'type': 'file' };
					var inst = $.jstree.reference(data.reference),
					    obj = inst.get_node(data.reference);
					inst.create_node(obj, nuevoNodo, "last", function (new_node) {
						//new_node.data = {file: true};
						setTimeout(function () {
							inst.edit(new_node);
						}, 0);
					});
				}
			};

			var renombrar = {
				"separator_before": false,
				"separator_after": false,
				"label": "Renombrar",
				"action": function action(obj) {
					var inst = $.jstree.reference(obj.reference);
					inst.edit($node);
				}
			};

			var borrar = {
				"separator_before": false,
				"separator_after": false,
				"label": "Borrar",
				"action": function action(obj) {
					var inst = $.jstree.reference(obj.reference);
					inst.delete_node($node);
				}
			};

			//solo se deben poder mover archivos.
			if ($node.original.type == 'folder') {
				return {
					'CrearArchivo': crearArchivo,
					'CrearCarpeta': crearCarpeta,
					"Borrar": borrar //Solo si no tiene hijos
				};
			} else if ($node.original.type == 'file') {
				return {
					'Abrir': abrir,
					'Renombrar': renombrar,
					"Borrar": borrar
				};
			}
		};

		elem.jstree({
			"core": {
				"check_callback": true,
				"themes": { "stripes": true },
				'data': {
					'url': function url(node) {
						return "/storage/jstreelist";
					},
					'dataType': "json",
					"data": function data(node) {
						return { "id": node.id };
					}
				}

			},
			'contextmenu': {
				'items': menuALaMedida
			},
			"plugins": ["contextmenu", "dnd", "search", "json_data", "state", "wholerow"]
		});

		return {};
	};
}
if (!hayValor(moduloApp)) {
	var moduloApp = function () {

		var props = {
			'URL_LOGIN': URL_LOGIN,
			'URL_LOGOUT': URL_LOGOUT,
			'HAS_USER': HAS_USER,
			'IS_ADMIN': IS_ADMIN,
			'AMBIENTE': AMBIENTE
		};

		var esPruebas = function esPruebas() {
			return props.AMBIENTE == 'pruebas';
		};

		var esProduccion = function esProduccion() {
			return props.AMBIENTE == 'produccion';
		};

		var esAdmin = function esAdmin() {
			return props.IS_ADMIN;
		};

		var esUsuario = function esUsuario() {
			return props.HAS_USER;
		};

		var login = function login() {
			moduloActividad.on();
			window.location.href = props.URL_LOGIN;
		};

		var logout = function logout() {
			moduloActividad.on();
			window.location.href = props.URL_LOGOUT;
		};

		var abrirBarraEdicion = function abrirBarraEdicion() {
			if ($('body').data('Midgard-midgardToolbar').options.display === 'full') {
				$('body').data('Midgard-midgardToolbar').__proto__.hide();
				$('body').data('Midgard-midgardToolbar').options.display = 'minimized';
			} else {
				$('body').data('Midgard-midgardToolbar').__proto__.show();
				$('body').data('Midgard-midgardToolbar').options.display = 'full';
			}
		};

		var borrarCache = function borrarCache() {
			var diferido = $.Deferred();
			moduloActividad.on();
			$.ajax({
				type: "GET",
				url: "/act/clearmemcache",
				data: JSON.stringify({}),
				contentType: "application/json; charset=utf-8"
			}).done(function (msg) {
				diferido.resolve();
			}).fail(function (jqXHR, textStatus) {
				diferido.reject();
			}).always(function () {
				moduloActividad.off();
			});
			return diferido.promise();
		};

		var inicializar = function inicializar() {
			var diferido = $.Deferred();
			diferido.resolve();
			return diferido.promise();
		};

		return {
			'esAdmin': esAdmin,
			'esUsuario': esUsuario,
			'login': login,
			'logout': logout,
			'borrarCache': borrarCache,
			'abrirBarraEdicion': abrirBarraEdicion,
			'esProduccion': esProduccion,
			'esPruebas': esPruebas
		};
	}();
}

if (!hayValor(moduloContactenos)) {
	var moduloContactenos = function () {

		function mostrarMensaje(papa, msg, clase) {
			var tag = 'div';
			var papaTag = papa.prop("tagName");
			if (papaTag == 'UL' || papaTag == 'OL') {
				tag = 'li';
			}
			var elerror = $('<' + tag + ' property="' + clase + '" class="' + clase + '"></' + tag + '>');
			elerror.text(msg);
			papa.prepend(elerror);
		};

		//valida un elemento input que responda a val(), prefiere placeholder y después name
		function escorrecto(elemento) {
			var validacion = elemento.attr('validacion');
			var nombre = elemento.attr('placeholder');
			if (nombre === undefined) {
				nombre = elemento.attr('name');
			}
			if (validacion !== undefined) {
				if (nombre === undefined) {
					nombre = validacion;
				}
				var re = new RegExp(validacion, "gi");
				if (!elemento.val().match(re)) {
					return { error: 1, msg: moduloLocal.traducir('general.verifique') + nombre };
				}
			}
			return { error: 0 };
		};

		/* Llena los campos de un formulario, prefiere name y luego placeholder */
		function llenarCampos(nuevo, data) {
			//Se asignan los inputs
			nuevo.find('input[type=text],select,textarea').each(function (i, elem) {
				var self = $(elem);
				var nombre = self.attr('name');
				if (nombre === undefined) {
					nombre = self.attr('placeholder');
				}
				if (nombre in data) {
					self.val(data[nombre]);
				}
			});

			nuevo.find('input[type=checkbox]').each(function (i, elem) {
				var self = $(elem);
				var nombre = self.attr('name');
				if (nombre === undefined) {
					nombre = self.attr('placeholder');
				}
				if (nombre in data) {
					if (data[nombre] == 1) {
						self.prop('checked', true);
					} else {
						self.prop('checked', false);
					}
				}
			});

			nuevo.find('input[type=radio]').each(function (i, elem) {
				var self = $(elem);
				var nombre = self.attr('name');
				if (nombre === undefined) {
					nombre = self.attr('placeholder');
				}
				if (nombre in data) {
					if (data[nombre] == self.attr('value')) {
						self.prop('checked', true);
					} else {
						self.prop('checked', false);
					}
				}
			});
		};

		/* Lee los campos de un formulario, prefiere name y luego placeholder */
		function capturarFormulario(item, data) {
			var ans = [];
			//Primero ejecuta las validaciones sobre input[text] y textarea
			item.find('input[type=text],textarea').each(function (i, elem) {
				var self = $(elem);
				var codigo = escorrecto(self);
				ans.push(codigo);
			});

			item.find('input[type=text],select,textarea,input[type=radio]:checked').each(function (i, elem) {
				var self = $(elem);
				var nombre = self.attr('name');
				if (nombre === undefined) {
					nombre = self.attr('placeholder');
				}
				if (nombre !== undefined) {
					var valor = self.val();
					data[nombre] = valor;
				}
			});

			item.find('input[type=checkbox]').each(function (i, elem) {
				var self = $(elem);
				var nombre = self.attr('name');
				if (nombre === undefined) {
					nombre = self.attr('placeholder');
				}
				if (nombre !== undefined) {
					var valor = self.is(':checked') ? 1 : 0;
					data[nombre] = valor;
				}
			});

			return ans;
		};

		var inicializar = function inicializar() {
			var diferido = $.Deferred();
			/**
    * Sirve para enviar mensajes:
    * 
    * <div class="contenedor-envio-mensajes">
    * <a class="boton-envio-mensaje button special">Enviar</a>
    * 
    * También para hacer CRUD de datos del usuario
    * 
    * <div class="contenedor-envio-mensajes" data-preload="/user/personal">
    * <a class="boton-envio-mensaje" data-url="/user/personal" data-once="false">Salvar</a>
    */
			$('.contenedor-envio-mensajes[data-preload]').each(function (i, elem) {
				var self = $(this);
				var url = self.attr('data-preload');
				if (url === undefined || url.length == 0) {
					return;
				}
				$.ajax({
					type: "GET",
					url: url,
					contentType: "application/json; charset=utf-8"
				}).done(function (msg) {
					llenarCampos(self, msg);
				}).fail(function (jqXHR, textStatus) {
					moduloMenus.error();
				});
			});

			//Se activan los formularios y sus respectivos botones
			$(".boton-envio-mensaje").on('click', function () {
				moduloActividad.on();
				var self = $(this);
				var url = self.attr('data-url');
				if (url === undefined || url.length == 0) {
					url = '/act/correo';
				}
				var esconder = self.attr('data-once');
				if (esconder === undefined || esconder.length == 0) {
					esconder = true;
				} else {
					esconder = false;
				}

				var papa = self.closest('.contenedor-envio-mensajes');
				if (!papa) {
					return;
				}

				papa.find("[property='error']").remove();
				papa.find('[property="gracias"]').addClass('invisible');

				var dicci = {};
				var codigos = capturarFormulario(papa, dicci);

				var errores = 0;
				for (var i = 0; i < codigos.length; i++) {
					var codigo = codigos[i];
					if (codigo.error != 0) {
						mostrarMensaje(papa, codigo.msg, 'error');
						errores++;
					}
				}

				if (errores > 0) {
					moduloActividad.off();
					return;
				}

				$.ajax({
					type: "PUT",
					url: url,
					data: JSON.stringify(dicci),
					contentType: "application/json; charset=utf-8"
				}).done(function (msg) {
					if (msg.error == 0) {
						if (esconder) {
							papa.children().addClass('invisible');
						}
						papa.find('[property="gracias"]').removeClass('invisible');
					} else {
						mostrarMensaje(papa, msg.msg, 'error');
					}
					moduloActividad.off();
				}).fail(function (jqXHR, textStatus) {
					//moduloMenus.error();
					mostrarMensaje(papa, textStatus, 'error');
					moduloActividad.off();
				});
			});
			diferido.resolve();
			return diferido.promise();
		};

		return {
			'inicializar': inicializar
		};
	}();
}
if (!hayValor(moduloImagenes)) {
	var moduloImagenes = function () {
		var PATRON_FONDO = /(background-image\s*:\s*url\s*\(\s*['"]?)([^'^"]*?)(\s*['"]?\))\s*(!\s*important)?\s*(;)?/ig;

		var asignarSrc = function asignarSrc(elem, unId, esEstilo) {
			var valor = moduloArchivos.generarUrlDadoId(unId);
			if (esEstilo) {
				//Se trata de una imagen de fondo
				var original = elem.attr('style');
				original = original.replace(PATRON_FONDO, '');
				original = original.trim();
				if (hayValor(original) && !original.endsWith(';')) {
					original = original + ';';
				}
				original += 'background-image: url(\'' + valor + '\') !important;';
				elem.attr('style', original);
				return original;
			} else {
				elem.attr('src', valor);
			}
			return valor;
		};

		var darIdAnterior = function darIdAnterior(elem, esEstilo) {
			var direccion = null;
			if (esEstilo) {
				var original = elem.attr('style');
				var partesEstilo = PATRON_FONDO.exec(original);
				if (partesEstilo != null && partesEstilo.length > 3) {
					direccion = partesEstilo[2];
				}
			} else {
				direccion = elem.attr('src');
			}
			return moduloArchivos.darIdDadoUrl(direccion);
		};

		var darValoresCargue = function darValoresCargue(self) {
			var props = moduloArchivos.completarPredeterminados({});
			//Se valida si el html declara un tamaño máximo específico
			try {
				var valorDataMax = self.attr('data-max');
				if (hayValor(valorDataMax)) {
					props.maximoTamanio = parseInt(valorDataMax) * 1024;
				}
			} catch (e2) {
				console.log('Intentó determinar tamaño máximo de imagen pero falló');
			}
			//Se valida si el html declara una carpeta específica
			var attrDataFolder = self.attr('data-carpeta');
			if ((typeof attrDataFolder === 'undefined' ? 'undefined' : _typeof(attrDataFolder)) !== (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined)) && attrDataFolder !== false) {
				attrDataFolder = attrDataFolder.trim();
				if (hayValor(attrDataFolder)) {
					if (attrDataFolder.charAt(0) != '/') {
						attrDataFolder = '/' + attrDataFolder;
					}
					props.dataFolder += attrDataFolder;
				}
			}
			return props;
		};

		return {
			'asignarSrc': asignarSrc,
			'darIdAnterior': darIdAnterior,
			'darValoresCargue': darValoresCargue
		};
	}();
}

if (!hayValor(moduloEdicion)) {
	var moduloEdicion = function () {
		var mapaIds = {};
		var activarEdicionOk = false;
		var vie = null;

		try {
			vie = getVieHere();
		} catch (e) {
			console.log('Error obteniendo vie', e);
		}

		var activarEdicion = function activarEdicion() {
			if (activarEdicionOk == true) {
				return;
			}
			if (typeof Backbone != 'undefined') {
				Backbone.sync = function (method, model, options) {
					try {
						var temp = model.toJSON();
						var viejo = temp['@subject'];
						if (model.isNew()) {
							if (viejo in mapaIds) {
								temp['@subject'] = mapaIds[viejo];
							} else {
								temp['@subject'] = '<' + new Date().getTime() + "_" + Math.floor(Math.random() * 10 + 1) + '>';
								mapaIds[viejo] = temp['@subject'];
							}
						}

						var ident = temp['@subject'];
						var tipo = temp['@type'];

						var matchCampo = /(viejs\.org\/ns\/)(.*)(>)/g.exec(tipo);
						var tipoNombre = null;
						if (matchCampo) {
							tipoNombre = matchCampo[2];
						}

						var patronIdent = /(<)(.*)(>)/g;
						var matchIdent = patronIdent.exec(ident);

						if (matchIdent == null) {
							options.error('error: no es identificador ' + ident);
							return;
						}

						var matchIdentFinal = matchIdent[2];
						var contenido = {};

						for (var key in temp) {
							var matchCampo = /(viejs\.org\/ns\/)(.*)(>)/g.exec(key);
							if (matchCampo) {
								contenido[matchCampo[2]] = temp[key];
							}
						}

						var completo = {};
						completo['payload'] = contenido;
						completo['leng'] = LENGUAJE;
						//completo['tipo'] = tipoNombre;
						switch (method) {
							case 'create':
							case 'update':
								moduloActividad.on();
								$.ajax({
									type: "POST",
									url: "/rest/" + (tipoNombre === null || tipoNombre === undefined ? 'Documento' : tipoNombre) + "/" + matchIdentFinal,
									data: JSON.stringify(completo),
									headers: moduloHttp.darHeader(),
									contentType: "application/json; charset=utf-8"
								}).done(function (msg) {
									options.success(model);
								}).fail(function (jqXHR, textStatus) {
									options.error('error');
								}).always(function () {
									moduloActividad.off();
								});
								break;
							case 'delete':
								break;
							case 'read':
								break;
						}
					} catch (e) {
						options.error('error ' + e);
					}
				};
				activarEdicionOk = true;
			}
		};

		var activarPaginacion = function activarPaginacion(nodo) {
			if (!hayValor(nodo)) {
				nodo = $('body');
			}

			function activatePageA(actual) {
				var cursor = actual.attr('data-next');
				var busqueda = JSON.parse(actual.attr('data-q'));
				var template = actual.attr('data-tpl');
				var target = actual.attr('data-target');
				var ipage = parseInt(actual.attr('data-page'));

				if (!busqueda['n']) {
					busqueda['n'] = 100; //valor predeterminado en python def buscarGQL(objeto)
				}
				if (!moduloApp.esAdmin()) {
					actual.html(ipage * busqueda['n'] + 1 + " al " + (ipage + 1) * busqueda['n']);
				}

				if (actual.attr("data-noa") === "1") {
					actual.removeAttr("href");
					actual.on('click', function () {

						var docHtml = document.getElementById(template).innerHTML;

						var destino = $(target);
						var postload = destino.attr('data-postload');
						if (destino.length > 0) {
							moduloActividad.on();
							$.ajax({
								type: "PUT",
								url: "/paginar/",
								data: JSON.stringify({ busqueda: busqueda, cursor: cursor }),
								contentType: "application/json; charset=utf-8"
							}).done(function (msg) {
								var datos = msg['datos'];
								var sigui = msg['next'];
								destino.empty();
								for (var i = 0; i < datos.length; i++) {
									var dato = datos[i];
									var nuevo = $(docHtml);
									llenarTemplate(nuevo, dato);
									destino.append(nuevo);
								}
								//Se mira si se debe crear un boton de siguiente
								if (sigui !== undefined && sigui.length > 0) {
									var padrePaginacion = actual.closest('.paginacion');
									if (padrePaginacion.find("[data-next='" + sigui + "']").length == 0) {

										var padreLocal = actual.parent();
										var nombreTAG = padreLocal.prop("tagName");
										var cambio = false;
										while (padreLocal.get(0) != padrePaginacion.get(0) && nombreTAG != 'BODY') {
											cambio = true;
											actual = padreLocal;
											padreLocal = padreLocal.parent();
											nombreTAG = padreLocal.prop("tagName");
										}
										var paginaSigui = actual.clone();
										var paginaSigui2;
										if (cambio) {
											paginaSigui2 = paginaSigui.find('[data-next]');
										} else {
											paginaSigui2 = paginaSigui;
										}
										paginaSigui2.attr("data-page", ipage + 1);
										paginaSigui2.attr("data-next", sigui);

										padrePaginacion.append(paginaSigui);
										activatePageA(paginaSigui2);
									}
								}

								if (postload !== undefined) {
									eval(postload);
								}
							}).fail(function (jqXHR, textStatus) {
								moduloMenus.mostrarMenuSoloTexto('Error paginando');
							}).always(function () {
								moduloActividad.off();
							});
						}
					});
				}
			};

			$.each(nodo.find("a[data-next]"), function (index, element) {
				var actual = $(element);
				activatePageA(actual);
			});
		};

		var funcElegirBorrar = function funcElegirBorrar() {
			var botones = $('.btnEliminar');
			if (botones.length > 0) {
				botones.remove();
			} else {
				$('[about]').each(function (indice, elem) {
					var self = $(elem);
					var panelEliminar = self.find('.btnEliminar');
					if (panelEliminar.length == 0) {
						self.prepend($('<div class="btnEliminar"><div class="btnEliminarX btnEliminar2 manito"></div></div>'));
						panelEliminar = self.find('.btnEliminar');
						var botonEliminar = panelEliminar.find('.btnEliminar2');
						botonEliminar.click(function () {
							var promesa = moduloMenus.confirmar();
							$.when(promesa).then(function () {
								var entidad = self;
								var ident = entidad.attr('about');
								var tipoNombre = null;
								tipoNombre = entidad.attr('typeof');

								var miLlave = (!hayValor(tipoNombre) ? '' : tipoNombre) + '_' + ident;
								if (miLlave in mapaIds) {
									ident = mapaIds[miLlave];
								}
								moduloActividad.on();
								$.ajax({
									type: "DELETE",
									url: "/rest/" + (!hayValor(tipoNombre) ? '' : tipoNombre) + '/' + ident
								}).done(function (msg) {
									entidad.remove();
									$('body').data('Midgard-midgardNotifications').create({ body: JSON.stringify(msg) });
									location.reload();
								}).fail(function (jqXHR, textStatus) {
									$('body').data('Midgard-midgardNotifications').create({ body: TRADUCTOR['error_ajax'][LENGUAJE] });
								}).always(function () {
									moduloActividad.off();
								});
								moduloMenus.sacarUltimo();
							}, function () {
								moduloMenus.sacarUltimo();
							});
						});
					}
				});
			}
		};

		var funcionAsignarPropiedadDeNodo = function funcionAsignarPropiedadDeNodo(vie, nomNodo, nomProp, nuevo, sufijo) {
			var sql = "[about='" + nomNodo + "'] [property='" + nomProp + "']";
			var sql2 = "[about='" + nomNodo + "'] [styleProperty='" + nomProp + "'],[about='" + nomNodo + "'][styleProperty='" + nomProp + "']";

			if (!hayValor(sufijo)) {
				sufijo = '';
			}

			var notificarCambio = function notificarCambio() {
				var dato = {};
				dato[nomProp + sufijo] = nuevo;
				var modelo = vie.entities.get(nomNodo);
				modelo.set(dato);

				//para notificar a createjs que cambio
				var cambiados = $('body').data('Midgard-midgardStorage').changedModels;
				if (_.indexOf(cambiados, modelo) === -1) {
					cambiados.push(modelo);
				}
				$('#midgardcreate-save').button({ disabled: false });
			};

			var objeto = $(sql);
			var objeto2 = $(sql2);
			if (objeto.length > 0) {
				var nombreTag = objeto.prop("tagName");
				if (nombreTag == 'IMG') {
					if (sufijo == '_alt') {
						objeto.attr("alt", nuevo);
					} else {
						objeto.attr("src", nuevo);
					}
				}
				notificarCambio();
			} else if (objeto2.length > 0) {
				nuevo = nuevo.replace(/"/g, '&quot;');
				objeto2.attr('style', nuevo);
				notificarCambio();
				//objeto.html(nuevo);//TODO esto dónde va??
			}
		};

		var activarEstilosEditables = function activarEstilosEditables(objeto) {
			objeto.find('[styleProperty]').each(function (index, element) {
				var self = $(element);
				if (self.attr("act_style") !== "ok") {
					var propiedad = self.attr('styleProperty');
					var padre;
					if (self.attr('about') !== undefined) {
						padre = self;
					} else {
						padre = self.closest('[about]');
					}
					if (padre === undefined) {
						return;
					}
					self.on("click", function (e) {
						if (e.shiftKey) {
							//Se permite editar el estilo
							var valorAnterior = self.attr('style');
							moduloMenus.mostrarFormularioEdicion(padre.attr('about'), propiedad, valorAnterior);
						} else if (e.ctrlKey) {
							//Se permtie diréctamente actualizar el fondo
							abrirFileChooser(self, propiedad);
						}
					});
					self.attr("act_style", "ok");
				}
			});
		};

		//------------------imagenes---------------------
		var comunEdicionImagenes = function comunEdicionImagenes(self, propEstilo) {
			var respuesta = {
				ok: false
			};
			if ($('#midgardcreate-save').css('display') === 'none') {
				return respuesta;
			}

			if (self.attr('about') !== undefined) {
				respuesta.padre = self;
			} else {
				respuesta.padre = self.closest('[about]');
			}

			if (respuesta.padre === undefined) {
				return respuesta;
			}

			respuesta.ident = respuesta.padre.attr('about');
			if (hayValor(propEstilo)) {
				respuesta.propiedad = propEstilo;
			} else {
				respuesta.propiedad = self.attr('property');
			}
			if (respuesta.ident === undefined || respuesta.propiedad === undefined) {
				return respuesta;
			}
			respuesta.ok = true;
			return respuesta;
		};

		var abrirAltEditor = function abrirAltEditor(self) {
			if (self.prop("tagName") !== 'IMG') {
				return;
			}
			var attrs = comunEdicionImagenes(self);
			if (attrs.ok == false) {
				return;
			}
			moduloMenus.mostrarFormularioEdicion(attrs.ident, attrs.propiedad, self.attr('alt'), '_alt');
		};

		//Todas las imágenes podrán cambiar con click
		var abrirFileChooser = function abrirFileChooser(self, propEstilo) {
			var attrs = comunEdicionImagenes(self, propEstilo);
			if (attrs.ok == false) {
				return;
			}

			var valoresCargue = moduloImagenes.darValoresCargue(self);

			var promesaCargue = moduloArchivos.subirArchivo({
				dataFolder: valoresCargue.dataFolder,
				id: moduloImagenes.darIdAnterior(self, hayValor(propEstilo)),
				maximoTamanio: valoresCargue.maximoTamanio
			});

			$.when(promesaCargue).then(function (data) {
				var valor = moduloImagenes.asignarSrc(self, data.id, hayValor(propEstilo));
				funcionAsignarPropiedadDeNodo(vie, attrs.ident, attrs.propiedad, valor);
			});
		};

		var activarImagenes = function activarImagenes(objeto) {
			objeto.find('img[property]').each(function (index, element) {
				var actual = $(element);
				if (actual.attr("act_img") !== "ok") {
					$(element).on('click', function (e) {
						var elemJq = $(element);
						if (e.altKey) {
							//Permite modificar el texto alternativo
							abrirAltEditor(elemJq);
						} else {
							//Permite modificar la imagen
							abrirFileChooser(elemJq);
						}
					});
					actual.attr("act_img", "ok");
				}
			});
		};

		//------------------imagenes---------------------

		//------------------html editables---------------------
		var activarEditables = function activarEditables(objeto) {
			objeto.find('.editable').each(function (index, element) {
				var actual = $(element);
				if (actual.attr("act_edt") !== "ok") {
					actual.on('click', function () {
						var padre = actual.closest('[about]');
						if (padre) {
							if ($('#midgardcreate-save').css('display') === 'none') {
								return;
							}
							moduloMenus.mostrarFormularioEdicion(padre.attr('about'), actual.attr('property'), actual.html());
						}
					});
					actual.attr("act_edt", "ok");
					//Se intenta agregar un elemento que permita edici�n despu�s de creaci�n
					if (!actual.hasClass('textarea_background')) {
						//? TODO decidir se para los fondos se va a hacer as�
						var nuevoBoton = $('<button type="button" style="padding: 5px !important;">editar</button>');
						nuevoBoton.bind('click', function () {
							actual.click();
						});
						actual.after(nuevoBoton);
					}
				}
			});
		};
		//------------------html editables---------------------

		var activarTextoPlano = function activarTextoPlano(objeto) {
			objeto.find('[textplain="true"]').each(function (index, element) {
				var actual = $(element);
				if (actual.attr("act_tpl") !== "ok") {
					actual.on('blur', function () {
						actual.html(actual.text());
					});
					actual.attr("act_tpl", "ok");
				}
			});
		};

		//------------------html fechas---------------------
		var activarFechas = function activarFechas(objeto) {
			objeto.find("[dateProperty]").each(function (index, element) {
				var actual = $(element);
				var nomPropiedad = actual.attr("dateProperty");
				if (actual.attr("act_date") !== "ok") {
					var padre = actual.closest('[about]');
					if (padre) {
						var valorViejo = formatearFecha(actual, 'dd/MM/yyyy');
						var nuevo = $('<input style="display: none;" class="datepicker" type="text" autofocuss value="' + valorViejo + '" data-valuee="' + valorViejo + '"></input>');
						padre.append(nuevo);
						//TODO verificar porque a veces no funciona
						actual.click(function () {
							nuevo.click();
							//nuevo.focus();
						});

						var nuevoProp = $('<div style="display: none;" property="' + nomPropiedad + '">' + actual.attr("data-value") + '</div>');
						padre.append(nuevoProp);

						nuevo.on('change', function () {
							var nomProp = nomPropiedad;
							var dato = {};

							var txtNueVal = "0";
							try {
								txtNueVal = parseInt(toDate(nuevo.val()).getTime() / 1000);
							} catch (e) {}

							dato[nomProp] = txtNueVal;
							var modelo = vie.entities.get(padre.attr("about"));
							modelo.set(dato);

							//para notificar a createjs que cambio
							var cambiados = $('body').data('Midgard-midgardStorage').changedModels;
							if (_.indexOf(cambiados, modelo) === -1) {
								cambiados.push(modelo);
							}
							$('#midgardcreate-save').button({ disabled: false });

							actual.attr("data-value", txtNueVal);
							nuevoProp.text(txtNueVal);
							formatearFecha(actual);
						});

						nuevo.pickadate({
							format: 'dd/mm/yyyy',
							formatSubmit: 'dd/mm/yyyy',
							closeOnSelect: true,
							closeOnClear: true,
							selectMonths: true,
							selectYears: true
						});
					}
					actual.attr("act_date", "ok");
				}
			});
		};
		//------------------html fechas---------------------

		var inicializar = function inicializar() {
			var diferido = $.Deferred();
			//Cuando se instancia inicializa la paginación de lo que exista en el body
			activarEdicion();
			activarPaginacion();

			//Se agrega el elemento que permitira subir archivos
			$("body").append($("<input type='file' id=\"formularioImagenes\" class=\"fileEscondido\" nodo2=\"\" property2=\"\" />"));

			//Se agrega el elemento que permite editar html
			$("body").append($('<div class="formhtml invisible">' + '	<div class="ctrles"><a class="guardar">Guardar</a>&nbsp;<a class="cancelar">Cancelar</a></div>' + '	<div class="boxtexto">' + '	<textarea></textarea>' + '	</div>' + '</div>'));

			activarEstilosEditables($('body'));
			activarImagenes($('body'));
			activarEditables($('body'));
			activarTextoPlano($('body'));
			activarFechas($('body'));
			//midgardeditableenable cuando una entidad es editable
			//midgardeditablechanged cuando la propiedad fue modificada
			//midgardeditableenableproperty al hacerse editable
			$('body').bind('midgardeditableenable', function (event, data) {
				var ident = data.entity['@subject'];
				var patronIdent = /(<)(.*)(>)/g;
				var matchIdent = patronIdent.exec(ident);
				if (matchIdent) {
					matchIdent = matchIdent[2];
				} else {
					matchIdent = ident;
				}

				var objeto = $("[about='" + matchIdent + "']");
				if (objeto !== undefined) {
					activarEstilosEditables(objeto); //debe ser antes que activarEditables
					activarImagenes(objeto);
					activarEditables(objeto);
					activarTextoPlano(objeto);
					activarFechas(objeto);
				}
			});
			// Instantiate Create
			$('body').midgardCreate({
				url: function url() {
					return 'javascript:false;';
				},
				vie: vie,
				//toolbar: 'full',//full or minimized
				highlight: false,
				//state: 'edit',//browse or edit tiene problemas cuando muestra los controles de formato posibles
				collectionWidgets: {
					'default': 'midgardCollectionAdd'
					//'default': 'midgardCollectionAddBetween',
					//'feature': 'midgardCollectionAdd'
				}
			});
			configureEditorsHere();
			var templatebotoneditar = "<div class='editableicon'></div>";
			$('.formhtml .cancelar').click(function () {
				$('.formhtml').addClass('invisible');
				//if (pila[pila.length-1] === "formhtml") {pila.pop();}
			});
			$('.formhtml .guardar').click(function () {
				try {
					var formulario = $('.formhtml');
					var nomNodo = formulario.attr('nodo2');
					var nomProp = formulario.attr('property2');
					var sufijo = formulario.attr('sufijo');
					var nuevo = $('.formhtml textarea').val();
					funcionAsignarPropiedadDeNodo(vie, nomNodo, nomProp, nuevo, sufijo);
					$('.formhtml').addClass('invisible');
					//if (pila[pila.length-1] === "formhtml") {pila.pop();}
				} catch (e) {
					$('body').data('Midgard-midgardNotifications').create({ body: "Error " + e });
				}
			});
			$("#formularioImagenes").change(function readImage() {
				if (this.files && this.files[0]) {
					var FR = new FileReader();
					FR.onload = function (e) {
						var formulario = $("#formularioImagenes");
						var nomNodo = formulario.attr('nodo2');
						var nomProp = formulario.attr('property2');
						var objeto = $("[about='" + nomNodo + "'] [property='" + nomProp + "']");
						var dato = {};
						dato[nomProp] = e.target.result;
						if (objeto) {
							if (objeto.prop("tagName") == 'IMG') {
								objeto.attr("src", e.target.result);
							} else {
								//asigna la imagen en el estilo
								objeto.attr("style", "background-image: url('" + e.target.result + "') !important");
							}

							var modelo = vie.entities.get(nomNodo);
							modelo.set(dato);

							//para notificar a createjs que cambio
							var cambiados = $('body').data('Midgard-midgardStorage').changedModels;
							if (_.indexOf(cambiados, modelo) === -1) {
								cambiados.push(modelo);
							}
							$('#midgardcreate-save').button({ disabled: false });
						}
					};
					FR.readAsDataURL(this.files[0]);
				}
			});

			$('textarea[property]').on('change keyup paste', function () {
				self = $(this);
				var propiedad = self.attr('property');
				var padre = self.closest('[about]');
				if (padre) {
					var ident = padre.attr('about');
					var valor = self.val();

					var dato = {};
					dato[propiedad] = valor;
					var modelo = vie.entities.get(ident);
					modelo.set(dato);

					//para notificar a createjs que cambio
					var cambiados = $('body').data('Midgard-midgardStorage').changedModels;
					if (_.indexOf(cambiados, modelo) === -1) {
						cambiados.push(modelo);
					}
					$('#midgardcreate-save').button({ disabled: false });
				}
			});

			return diferido.promise();
		};

		return {
			'inicializar': inicializar,
			'activarPaginacion': activarPaginacion,
			'activarEdicion': activarEdicion,
			'funcElegirBorrar': funcElegirBorrar
		};
	}();
}
if (!hayValor(moduloMenus)) {
	var moduloMenus = function () {

		var pilaLocal = [];

		var cargarHtml = function cargarHtml(ruta) {
			return moduloHttp.get('/assets/cmgae/menus' + ruta);
		};

		var esUltimoId = function esUltimoId(id) {
			if (pilaLocal.length == 0) {
				return false;
			}
			return pilaLocal[pilaLocal.length - 1].id == id;
		};

		var sacarUltimo = function sacarUltimo() {
			if (pilaLocal.length == 0) {
				return;
			}
			var elem = pilaLocal[pilaLocal.length - 1].nodo;
			elem.remove();
			pilaLocal.pop();
		};

		var mostrarMenuSoloTexto = function mostrarMenuSoloTexto(texto) {
			var promesa = cargarHtml('/soloTexto.html');
			$.when(promesa).then(function (datos) {
				agregarNodoPila('alerta', datos, { html: { '.mensaje_texto': texto } });
			});
		};

		var error = function error() {
			mostrarMenuSoloTexto(moduloLocal.traducir('menus.mensajes.error'));
		};

		var notificar = function notificar(promesa) {
			$.when(promesa).then(function () {
				mostrarMenuSoloTexto(moduloLocal.traducir('menus.mensajes.hecho'));
			}, error);
		};

		var activarNodo = function activarNodo(nodo, otroMapa) {
			moduloLocal.procesarElemento(nodo);
			var mapa = {
				funciones: {
					'.menu_opc_ingresar': moduloApp.login,
					'.menu_opc_salir': moduloApp.logout,
					'.menu_opc_borrar_cache': moduloApp.borrarCache,
					'.create-ui-toggle2': moduloApp.abrirBarraEdicion,
					'.menuEliminar': moduloEdicion.funcElegirBorrar
				},
				html: {},
				botones: {}
			};
			mapa = $.extend(mapa, otroMapa);
			$.each(mapa.funciones, function (clase, funcion) {
				nodo.find(clase).on('click', function () {
					sacarUltimo();
					var promesa = funcion();
					if (hayValor(promesa)) {
						notificar(promesa);
					}
				});
			});
			if (esObjeto(mapa.botones)) {
				var contenedor = $('<div class="row"><div class="col-xs-12"><div class="text-right botones-aca"></div></div></div>');
				var predefinido = { texto: '?', clase: 'btn-primary', accion: function accion() {} };
				$.each(mapa.botones, function (llave, detalle) {
					predefinir(detalle, predefinido);
					var nuevoBoton = $('<button type="button" class="btn btn-xs"></button>');
					nuevoBoton.on('click', detalle.accion);
					nuevoBoton.addClass(detalle.clase);
					nuevoBoton.text(detalle.texto);
					contenedor.find('.botones-aca').append(nuevoBoton);
				});
				nodo.append(contenedor);
			}
			for (var clase in mapa.html) {
				nodo.find(clase).html(mapa.html[clase]);
			}
		};

		var confirmar = function confirmar() {
			var promesa = cargarHtml('/confirmar.html');
			var diferido = $.Deferred();
			$.when(promesa).then(function (data) {
				var otros = {
					'botones': {
						'aceptar': {
							'texto': moduloLocal.traducir('menus.botones.aceptar'),
							'clase': 'btn-success',
							'accion': function accion() {
								diferido.resolve();
							}
						},
						'cancelar': {
							'texto': moduloLocal.traducir('menus.botones.cancelar'),
							'clase': 'btn-danger',
							'accion': function accion() {
								diferido.reject();
							}
						}
					}
				};
				agregarNodoPila('confirmacion', data, otros);
			});
			return diferido.promise();
		};

		var agregarNodoPila = function agregarNodoPila(ID, data, otroMapa) {
			var nodo = $(data);
			$('body').append(nodo);
			pilaLocal.push({ 'id': ID, 'nodo': nodo });
			activarNodo(nodo, otroMapa);
		};

		var mostrarMenuBasico = function mostrarMenuBasico() {
			var ID = 'menu';
			var diferido = $.Deferred();
			if (esUltimoId(ID)) {
				sacarUltimo();
				diferido.reject();
				return diferido.promise();
			}
			var promesa = null;
			if (moduloApp.esUsuario()) {
				if (moduloApp.esAdmin()) {
					promesa = cargarHtml('/menuInicialAdmin.html');
				} else {
					promesa = cargarHtml('/menuInicialAnonimo.html');
				}
			} else {
				promesa = cargarHtml('/menuInicialAnonimo.html');
			}
			$.when(promesa).then(function (data) {
				agregarNodoPila(ID, data);
				diferido.resolve();
			});
			return diferido.promise();
		};

		var mostrarMenuPagina = function mostrarMenuPagina() {
			//TODO reconfigurar
			pila.push('menu_pagina');
			$('.menu_core').toggleClass('invisible');
			$('.menu_pagina').toggleClass('invisible');
			window.scrollTo(0, 0);
		};

		var mostrarFormularioEdicion = function mostrarFormularioEdicion(nodo, atributo, valor, sufijo) {
			//TODO reconfigurar
			pila.push("formhtml");
			$(".formhtml").attr('nodo2', nodo);
			$(".formhtml").attr('property2', atributo);
			$(".formhtml").attr('sufijo', sufijo);
			$('.formhtml textarea').val(valor);
			$('.formhtml').removeClass('invisible');
		};

		var inicializar = function inicializar() {
			var diferido = $.Deferred();
			$(document).keyup(function (e) {
				if (e.keyCode == 27) {
					if (pilaLocal.length == 0) {
						mostrarMenuBasico();
					} else {
						sacarUltimo();
					}
				}
			});
			diferido.resolve();
			return diferido.promise();
		};

		return {
			'inicializar': inicializar,
			'mostrarMenuPagina': mostrarMenuPagina,
			'mostrarFormularioEdicion': mostrarFormularioEdicion,
			'mostrarMenuBasico': mostrarMenuBasico,
			'mostrarMenuSoloTexto': mostrarMenuSoloTexto,
			'confirmar': confirmar,
			'sacarUltimo': sacarUltimo,
			'error': error
		};
	}();
}